{"version":3,"sources":["client.js","Notification.js","StudentDrawerForm.js","App.js","reportWebVitals.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","Promise","reject","openNotificationWithIcon","type","message","description","duration","placement","notification","successNotification","errorNotification","Option","Select","antIcon","LoadingOutlined","style","fontSize","spin","StudentDrawerForm","showDrawer","setShowDrawer","fetchStudents","onCLose","useState","submitting","setSubmitting","title","width","onClose","visible","bodyStyle","paddingBottom","footer","textAlign","onClick","marginRight","layout","onFinishFailed","errorInfo","alert","JSON","stringify","onFinish","student","console","log","fetch","headers","method","body","then","addNewStudent","name","catch","err","json","res","status","finally","hideRequiredMark","gutter","span","Item","label","rules","required","placeholder","value","htmlType","indicator","CustomAvatar","trim","length","icon","UserOutlined","split","charAt","toUpperCase","Header","Layout","Content","Footer","Sider","SubMenu","Menu","removeStudent","studentId","callback","deleteStudent","columns","dataIndex","key","render","text","Group","onConfirm","id","okText","cancelText","href","Button","size","App","students","setStudents","collapsed","setCollapsed","fetching","setFetching","data","useEffect","minHeight","collapsible","onCollapse","className","theme","defaultSelectedKeys","mode","PieChartOutlined","DesktopOutlined","TeamOutlined","FileOutlined","padding","margin","PlusOutlined","dataSource","bordered","marginLeft","count","pagination","pageSize","scroll","y","rowKey","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0724a1d0.chunk.js","sourcesContent":["import fetch from 'unfetch';\r\n\r\nconst checkStatus = response => {\r\n    if (response.ok) {\r\n        return response;\r\n    }\r\n    //convert non-2xx HTTP responses into errors:\r\n    const error = new Error(response.statusText);\r\n    error.response = response;\r\n    return Promise.reject(error);\r\n}\r\n\r\nexport const getAllStudents = () =>\r\n    fetch(\"api/v1/students\")\r\n        .then(checkStatus);\r\n\r\nexport const addNewStudent = student =>\r\n    fetch(\"api/v1/students\", {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify(student)\r\n    }).then(checkStatus);\r\n\r\nexport const deleteStudent = studentId =>\r\n    fetch(`api/v1/students/${studentId}`, {\r\n        method: 'DELETE'\r\n    }).then(checkStatus);\r\n\r\n","import {notification} from 'antd';\r\n\r\nconst openNotificationWithIcon = (type, message, description, duration, placement) => {\r\n    placement = placement || \"topRight\"\r\n    notification[type]({message, description,duration, placement});\r\n};\r\n\r\nexport const successNotification = (message, description,placement) =>\r\n    openNotificationWithIcon('success', message, description,10,placement);\r\n\r\nexport const infoNotification = (message, description,placement) =>\r\n    openNotificationWithIcon('info', message, description,10,placement);\r\n\r\nexport const warningNotification = (message, description,placement) =>\r\n    openNotificationWithIcon('warning', message, description,10,placement);\r\n\r\nexport const errorNotification = (message, description,placement) =>\r\n    openNotificationWithIcon('error', message, description,10,placement);","import {Drawer, Input, Col, Select, Form, Row, Button, Spin} from 'antd';\r\nimport {addNewStudent} from \"./client\";\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\nimport {useState} from \"react\";\r\nimport {successNotification, errorNotification} from \"./Notification\";\r\n\r\nconst {Option} = Select;\r\n\r\nconst antIcon = <LoadingOutlined style={{fontSize: 24}} spin/>\r\n\r\nfunction StudentDrawerForm({showDrawer, setShowDrawer, fetchStudents}) {\r\n    const onCLose = () => setShowDrawer(false);\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    const onFinish = student => {\r\n        setSubmitting(true)\r\n        console.log(JSON.stringify(student, null, 2))\r\n        addNewStudent(student)\r\n            .then(() => {\r\n                console.log(\"student added\")\r\n                onCLose();\r\n                successNotification(\r\n                    \"Student successfully added\",\r\n                    `${student.name} was added to the system`);\r\n                fetchStudents();\r\n            }).catch(err => {\r\n            console.log(err);\r\n            err.response.json().then(res => {\r\n               console.log(res);\r\n               errorNotification(\r\n                   \"There was an issue\",\r\n                   `${res.message} [${res.status}] [${res.error}]`,\r\n                   \"bottomLeft\"\r\n               )\r\n            });\r\n        }).finally(() => {\r\n            setSubmitting(false)\r\n        })\r\n    };\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        alert(JSON.stringify(errorInfo, null, 2));\r\n    };\r\n\r\n    return <Drawer\r\n        title=\"Create new student\"\r\n        width={720}\r\n        onClose={onCLose}\r\n        visible={showDrawer}\r\n        bodyStyle={{paddingBottom: 80}}\r\n        footer={\r\n            <div\r\n                style={{\r\n                    textAlign: 'right',\r\n                }}\r\n            >\r\n                <Button onClick={onCLose} style={{marginRight: 8}}>\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        }\r\n    >\r\n        <Form layout=\"vertical\"\r\n              onFinishFailed={onFinishFailed}\r\n              onFinish={onFinish}\r\n              hideRequiredMark>\r\n            <Row gutter={16}>\r\n                <Col span={12}>\r\n                    <Form.Item\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        rules={[{required: true, message: 'Please enter student name'}]}\r\n                    >\r\n                        <Input placeholder=\"Please enter student name\"/>\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <Form.Item\r\n                        name=\"email\"\r\n                        label=\"Email\"\r\n                        rules={[{required: true, message: 'Please enter student email'}]}\r\n                    >\r\n                        <Input placeholder=\"Please enter student email\"/>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n                <Col span={12}>\r\n                    <Form.Item\r\n                        name=\"gender\"\r\n                        label=\"gender\"\r\n                        rules={[{required: true, message: 'Please select a gender'}]}\r\n                    >\r\n                        <Select placeholder=\"Please select a gender\">\r\n                            <Option value=\"MALE\">MALE</Option>\r\n                            <Option value=\"FEMALE\">FEMALE</Option>\r\n                            <Option value=\"OTHER\">OTHER</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col span={12}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {submitting && <Spin indicator={antIcon}/>}\r\n            </Row>\r\n        </Form>\r\n    </Drawer>\r\n}\r\n\r\nexport default StudentDrawerForm;","import {useEffect, useState} from 'react';\nimport {deleteStudent, getAllStudents} from \"./client\";\nimport './App.css';\nimport {Avatar, Badge, Breadcrumb, Button, Empty, Layout, Menu, Popconfirm, Radio, Spin, Table, Tag} from 'antd';\nimport {\n    DesktopOutlined,\n    FileOutlined,\n    LoadingOutlined,\n    PieChartOutlined,\n    PlusOutlined,\n    TeamOutlined,\n    UserOutlined,\n} from '@ant-design/icons';\nimport StudentDrawerForm from \"./StudentDrawerForm\";\nimport {errorNotification, successNotification} from \"./Notification\";\n\nconst CustomAvatar = ({name}) => {\n    let trim = name.trim();\n    if (trim.length === 0) {\n        return <Avatar icon={<UserOutlined/>}/>\n    }\n    const split = trim.split(\" \");\n    if (split.length === 1) {\n        return <Avatar>{name.charAt(0).toUpperCase()}</Avatar>\n    }\n    return <Avatar>{`${name.charAt(0).toUpperCase()}`}</Avatar>\n}\nconst {Header, Content, Footer, Sider} = Layout;\nconst {SubMenu} = Menu;\nconst removeStudent = (studentId, callback) => {\n    deleteStudent(studentId).then(() => {\n       successNotification(\"Student deleted\",`Student ${studentId} was deleted`);\n       callback();\n    }).catch(err => {\n        err.response.json().then(res => {\n            console.log(res);\n            errorNotification(\n                \"There was an issue \",\n                `${res.message} [${res.status}] [${res.error}]`,\n            )\n        });\n    });\n}\nconst columns = fetchStudents => [\n    {\n        title: '',\n        dataIndex: 'avatar',\n        key: 'avatar',\n        render: (text, student) =>\n            <CustomAvatar name={student.name}/>\n    },\n    {\n        title: 'Id',\n        dataIndex: 'id',\n        key: 'id',\n    },\n    {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    {\n        title: 'Email',\n        dataIndex: 'email',\n        key: 'email',\n    },\n    {\n        title: 'Gender',\n        dataIndex: 'gender',\n        key: 'gender',\n    },\n    {\n        title: 'Actions',\n        key: 'actions',\n        render: (text, student) =>\n            <Radio.Group>\n                <Popconfirm\n                    placement='topRight'\n                    title={`Are you sure to delete ${student.name} ?`}\n                    onConfirm={() => removeStudent(student.id, fetchStudents)}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                >\n                    <a href=\"#\">\n                        <Radio.Button value=\"small\">Delete</Radio.Button>\n                    </a>\n                </Popconfirm>,\n                <Radio.Button value=\"small\">Edit</Radio.Button>\n            </Radio.Group>\n    },\n];\nconst antIcon = <LoadingOutlined style={{fontSize: 24}} spin/>;\nconst size = \"medium\";\n\nfunction App() {\n    const [students, setStudents] = useState([]);\n    const [collapsed, setCollapsed] = useState(false);\n    const [fetching, setFetching] = useState(true);\n    const [showDrawer, setShowDrawer] = useState(false);\n\n    const fetchStudents = () =>\n        getAllStudents()\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                setStudents(data);\n            }).catch(err => {\n                console.log(err.response)\n            err.response.json().then(res => {\n                console.log(res);\n                errorNotification(\n                    `There was an issue`,\n                    `${res.message} [${res.error}] [statusCode: ${res.status}]`)\n            });\n        }).finally(() => setFetching(false));\n\n    useEffect(() => {\n        console.log(\"component is mounted\");\n        fetchStudents();\n    }, []);\n\n    const renderStudents = () => {\n        if (fetching) {\n            return <Spin indicator={antIcon}/>\n        }\n        if (students.length <= 0) {\n            return <>\n                <StudentDrawerForm\n                    showDrawer={showDrawer}\n                    setShowDrawer={setShowDrawer}\n                    fetchStudents={fetchStudents}\n                />\n                <Button\n                    onClick={() => setShowDrawer(!showDrawer)}\n                    type=\"primary\"\n                    icon={<PlusOutlined/>}\n                    size={size}>\n                    Add New Student\n                </Button>\n                <Empty/>\n            </>\n\n        }\n        return <>\n            <StudentDrawerForm\n                showDrawer={showDrawer}\n                setShowDrawer={setShowDrawer}\n                fetchStudents={fetchStudents}\n            />\n            <Table\n                dataSource={students}\n                columns={columns(fetchStudents)}\n                bordered\n                title={() =>\n                    <>\n                        <Tag style={{marginLeft: \"10px\"}}>Number of students</Tag>\n                        <Badge count={students.length} className=\"site-badge-count-4\"/>\n                        <br/><br/>\n                        <Button\n                            onClick={() => setShowDrawer(!showDrawer)}\n                            type=\"primary\"\n                            icon={<PlusOutlined/>}\n                            size={size}>\n                            Add New Student\n                        </Button>\n                    </>\n                }\n\n                pagination={{pageSize: 50}}\n                scroll={{y: 500}}\n                rowKey={(student) => student.id}\n                // footer={() => 'Footer'}\n            />\n        </>\n    }\n\n    return <Layout style={{minHeight: '100vh'}}>\n        <Sider collapsible collapsed={collapsed}\n               onCollapse={setCollapsed}>\n            <div className=\"logo\"/>\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n                <Menu.Item key=\"1\" icon={<PieChartOutlined/>}>\n                    Option 1\n                </Menu.Item>\n                <Menu.Item key=\"2\" icon={<DesktopOutlined/>}>\n                    Option 2\n                </Menu.Item>\n                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"User\">\n                    <Menu.Item key=\"3\">Tom</Menu.Item>\n                    <Menu.Item key=\"4\">Bill</Menu.Item>\n                    <Menu.Item key=\"5\">Alex</Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub2\" icon={<TeamOutlined/>} title=\"Team\">\n                    <Menu.Item key=\"6\">Team 1</Menu.Item>\n                    <Menu.Item key=\"8\">Team 2</Menu.Item>\n                </SubMenu>\n                <Menu.Item key=\"9\" icon={<FileOutlined/>}>\n                    Files\n                </Menu.Item>\n            </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n            <Header className=\"site-layout-background\" style={{padding: 0}}/>\n            <Content style={{margin: '0 16px'}}>\n                <Breadcrumb style={{margin: '16px 0'}}>\n                    <Breadcrumb.Item>User</Breadcrumb.Item>\n                    <Breadcrumb.Item>Bill</Breadcrumb.Item>\n                </Breadcrumb>\n                <div className=\"site-layout-background\" style={{padding: 24, minHeight: 360}}>\n                    {renderStudents()}\n                </div>\n            </Content>\n            <Footer style={{textAlign: 'center'}}>© 2021 Created by <a href={\"https://cyberdev-tech.com/\"}>CyberTech</a></Footer>\n        </Layout>\n    </Layout>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}